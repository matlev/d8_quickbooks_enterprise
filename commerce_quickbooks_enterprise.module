<?php

/**
 * @file
 * Contains commerce_quickbooks_enterprise.module..
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Field\BaseFieldDefinition;

/**
 * Implements hook_help().
 */
function commerce_quickbooks_enterprise_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the commerce_quickbooks_enterprise module.
    case 'help.page.commerce_quickbooks_enterprise':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Drupal to Quickbooks Enterprise editions via SOAP service') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_theme().
 *
 * The QBXML theme templates.
 *
 * @param $existing
 * @param $type
 * @param $theme
 * @param $path
 * @return array
 */
function commerce_quickbooks_enterprise_theme($existing, $type, $theme, $path) {
  return array(
    'add_customer_qbxml' => array(
      'variables' => array('properties' => NULL),
    ),
    'add_inventory_product_qbxml' => array(
      'variables' => array('properties' => NULL),
    ),
    'add_invoice_qbxml' => array(
      'variables' => array('properties' => NULL),
    ),
    'add_non_inventory_product_qbxml' => array(
      'variables' => array('properties' => NULL),
    ),
    'add_payment_qbxml' => array(
      'variables' => array('properties' => NULL),
    ),
    'add_sales_receipt_qbxml' => array(
      'variables' => array('properties' => NULL),
    ),
    'mod_invoice_qbxml' => array(
      'variables' => array('properties' => NULL),
    ),
    'commerce_quickbooks_enterprise_qwc' => array(
      'variables' => array('properties' => NULL),
    ),
  );
}

/**
 * Implements hook_entity_base_field_info().
 *
 * Attaches relevant Quickbooks IDs to entities in Drupal for faster processing.
 *
 * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
 */
function commerce_quickbooks_enterprise_entity_base_field_info(EntityTypeInterface $entity_type) {
  $types = ['user', 'commerce_order', 'commerce_product_variation'];
  $entity_id = $entity_type->id();

  if (in_array($entity_id, $types)) {
    $fields['commerce_qbe_qbid'] = BaseFieldDefinition::create('text')
      ->setLabel(t('Quickbooks List ID'))
      ->setDescription(t('An ID stored in Quickbooks that references this entity.'));

    if ($entity_id == 'commerce_order') {
      $fields['commerce_qbe_edit_sequence'] = BaseFieldDefinition::create('text')
        ->setLabel(t('Quickbooks Revision ID'))
        ->setDescription(t('If this order exists on Quickbooks, in order to push updates Drupal must have the same revision ID as Quickbooks.'));
    }

    return $fields;
  }
}
